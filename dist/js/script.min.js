const Config = {
  debug: {
    todo: true,
    consoleDebugger: true
  },
  dataRequest: {
    pharmacies: '/data/pharmacies.json',
    msearch2: '/assets/components/msearch2/action.php',
    minishop2: '/assets/components/minishop2/action.php',
    auth: '/'
  },
  responsive: {
    mobileEnabled: false,
    state: 0,
    mobileWidth: 768
  },
  endpoints: {
    feedback: "/endpoints/feedback.php",
    optics: "/endpoints/optics.php",
    promo:  "/endpoints/promo.php"
  },
  price: {
    minPrice: 0,
    maxPrice: 10000,
    orderMinPrice: 100,
    maxDiscountCost: 5000,
    maxDiscountProgress: 6000,
    discountProgressStageValues: [{
        price: 1500,
        percent: 3
      },
      {
        price: 3000,
        percent: 5
      },
      {
        price: 5000,
        percent: 7
      }
    ]
  },
  pharmacies: {
    nearestSearchRange: 100
  },
  analytics: {
    metrikaCounterId: 47890313
  },
  strings: {
    rareSubmit: "Наш сотрудник свяжется с вами в течении 15 минут",
    feedbackSubmit: "Ваше сообщение успешно отправлено",
    feedbackSubscribe: "Спасибо,что подписались на нашу рассылку. Теперь вы сможете получать актуальную информацию о наших акциях и спец. предложениях. Для подтверждения подписки перейдите по ссылке в письме.",
    feedbackRequest: "Ваша заявка успешно отправлена",
    inputValidationFailed: "Одно или несколько полей заполнены неверно",
    moreAvailableLimit: "Выбранного количества нет в наличии, на остатке",
    waitPaveroApi: "Будет работать, когда Паша сделает API"
  },
  contact: {
    tirkai: '<a href="http://t.me/tirkai">Tirkai</a>',
    pavero: '<a href="http://t.me/pavero777">Pavero</a>'
  }
};
const DefineConst = {
  INPUT_TYPE_NUMBER: "INPUT_TYPE_NUMBER",
  INPUT_CHECKBOX: "INPUT_CHECKBOX",
  INPUT_TEXT: "INPUT_TEXT",
  UI_SELECT: "UI_SELECT",
  UI_COUNTER: "UI_COUNTER",
  UI_CHECKBOX: "UI_CHECKBOX",
  STATUS_SUCCESS: "success",
  STATUS_ERROR: "error",
  OPTICS_GLASSES: "GLASSES",
  OPTICS_LENSES: "LENSES",
  OPTICS_DEFAULT_COVER: "Без покрытия",
  AUTH_FRAME_LOGIN: "login",
  AUTH_FRAME_REGISTER: "register",
  AUTH_FRAME_VERIFY: "verify"
}
export {
  Config,
  DefineConst
};
class Service {
  static defaultValue(value, def) {
    return value != undefined ? value : (def != undefined ? def : null);
  }
  static checkPageUrl(page) {
    return location.pathname.indexOf(page) > -1;
  }
  static initComponent(id, callback) {
    $(document).ready(function () {
      if ($("." + id).length) {
        Debug.log(callback, `Inited ${id}`, this);
        callback();
      }

    });
  }
  static getQueryParams() {
    let params = location.search.replace("?","").split("&");
    let result = {};
    params.map((item) => {
      let pair = item.split("=");
      result[pair[0]] = pair[1];
    });
    return result;
  }
  static randomRange(min, max) {
    return Math.floor(Math.random() * (max - min) + min);
  }
  static keywordInitElementId(keyword, callback) {
    $(document).ready(function () { 
      if ($("." + keyword).length) callback();
    });
  }
  static generateKey(length = 16) {
    let key = "";
    let possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    for (var i = 0; i < length; i++) key += possible.charAt(Math.floor(Math.random() * possible.length));
    return key;
  }
  static getUnixTime() {
    return Math.round(new Date().getTime() / 1000);
  }
  static scoped(callback) {
    return callback();
  }
  static letterCase(value) {
    return value.charAt(0).toUpperCase() + value.slice(1);
  }
}
export {
  Service
};
class Debug{
    static config = {
        enabled: true,
        trace: true,
        save: false
    };
    static log(data, name = "", ctx = {name: "null"}){
        let date = new Date();
        let instanceName = ctx.name != undefined ? ctx.name : ctx.constructor.name;
        console.groupCollapsed(`<${instanceName}> ${name}`);
        let output = {
            data: data,
            instance: ctx
        }
        this.config.trace ? console.trace(output) : console.log(output);
        console.groupEnd();

    }
    static error(e){
        console.trace(e);
    }
  }  
export { Debug };
class UIController{
    static _elements = {};
    static _updateListeners = [];
    static addElement(key, element){
        this._elements[key] = element;
        this.updateElements();
    }
    static updateElements(){
        this._updateListeners.forEach((item) => {
            console.log("_updateListeners");
            if(item.active) item.listener();
            if(!item.repeat) item.active = false;
        });
    }
    static addUpdateListener(params){
        this._updateListeners.push({
            key: params.key,
            active: true,
            repeat: params.repeat,
            listener: params.listener
        })
    }
    static getControllerByElement(element){
        let elementKey = $(element).attr("data-ui-key");
        return this._elements[elementKey];
    }
    static getControllerByKey(key){
        return this._elements[key];
    }
    static awaitReady(element){
        return new Promise((resolve, reject) => {
            let key = Service.generateKey();
            console.log("k",key);
            let updateListener = {
                key: key,
                repeat: true,
                listener: () => {
                    let controller = UIController.getControllerByElement(element);
                    if(controller.isReady){
                        resolve(controller);
                        UIController._updateListeners.find((item) => item.key == key).active = false;
                    }
                }
            };
            UIController.addUpdateListener(updateListener);
        });  
    }
}

class UIElement{
    _isReady = false;
    _readyListener = new Function();
    listeners = {};
    addListener(name, listener){
        this.listeners[name].push(listener);
    }
    callListener(name){
        this.listeners[name].forEach(listener => listener());
    }
    get isReady(){
        return this._isReady;
    }
    set isReady(value){
        this._isReady = value;
        UIController.updateElements();
    }
    createKey(element, controller){ 
        let key = Service.generateKey();
        $(element).attr("data-ui-key", key);
        UIController.addElement(key, controller);
    }
    ready(callback){
        if(this.isReady) callback(this);
        else this._readyListener = callback;
    }  
    
} 
export { UIController, UIElement };
class UIHelpers {
    static _scrollLockState = false;
    static scrollLock(value){
        let className = "scroll-lock";
        if(value) $("html, body").addClass(className);
        else $("html, body").removeClass(className);
        this._scrollLockState = value;      
    }
    static scrollTo(params) {
        let {
            element,
            modify,
            speed
        } = params;
        $('html, body').stop().animate({
            scrollTop: $(element).offset().top + modify
        }, speed);
    }
    static scrollInnerLeft(params){
        let {element, speed = 300, value = 0} = params;
        $(element).animate({
            scrollLeft: value
        }, speed)
    }
    static inputType(type, element) {
        if (type == DefineConst.INPUT_TYPE_NUMBER) element.value = element.value.replace(/[^0-9]/g, '');
    }
} 
export { UIHelpers };
import { UIElement } from './UIController.class.js';
class UICounter extends UIElement{ 
    constructor(params){
        super(params);
        // some
        this.defaultValue = params.defaultValue || 1;
        this.minCount = params.minCount || 1;
        this.maxCount = params.maxCount || 100;
        this.element = params.element;
        this.increaseHandler = params.increaseHandler || new Function();
        this.decreaseHandler = params.decreaseHandler || new Function();
        this.changeHandler = params.changeHandler || new Function();
        this.overflowHandler =  params.overflowHandler || new Function();
        this.count = this.defaultValue;
        this.render(); 
    }
    increase(){
        if(this.count >= this.maxCount) this.overflowHandler();
        this.set(this.count + 1);
        this.increaseHandler();
    }
    decrease(){
        this.set(this.count - 1);
        this.decreaseHandler();
    }
    set(value){
        this.count = this.checkLimit(value);
        this.changeHandler();
        this.render();
    }
    checkLimit(value){
        let result = value;
        return result < this.maxCount ? (result > this.minCount ? value : this.minCount) : this.maxCount;
    }
    render(){
        this.element.attr({"data-count": this.count});
        this.element.find(".ui-counter__value").text(this.count);
    }
    init(){
        let $increase = $(this.element).find(".ui-counter__increase");
        let $decrease = $(this.element).find(".ui-counter__decrease");
        $increase.on("click", () => this.increase());
        $decrease.on("click", () => this.decrease());
        this.createKey(this.element, this);
        return this; 
    }

} 

export { UICounter };
import { UIElement } from './UIController.class.js';
class UICheckboxController{
    static init(){
        $(".ui-checkbox").each((i, item) => new UICheckbox({
            element: $(item)
        }).init());
    }
}

class UICheckbox extends UIElement{
    _isChecked = false;
    _listeners = {
        onChange: [],
        onCheckActive: [],
        onCheckDeactive: []
    }
    props = {
        isChecked: false
    }
    get isChecked(){ return this._isChecked; }
    set isChecked(value){ 
        this._isChecked = value;
        this.callListeners('onChange');
        if(this._isChecked) this.callListeners('onCheckActive');
        else this.callListeners('onCheckDeactive');
        this.updateElementEnabled();
    }
    constructor(params) {
        super(params);
        $.extend(this.props,params.props);
        
        this.element = params.element;
        let dataId = $(this.element).attr("id");
        let dataName = $(this.element).attr("data-name");
        if(dataId != undefined) this.id = "ui-checkbox-" + $(this.element).attr("id");
        else this.id = "ui-checkbox-" + Service.generateKey();
        this.name = dataName;
    }
    addListener(event, listener){
        Debug.log([this._listeners[event], listener],"Add Listener", this);
        this._listeners[event].push(listener);
    }
    callListeners(event){
        this._listeners[event].forEach((listener) => listener());
    }
    changeState(){
        let value = $(this.$checkbox.prop('checked'));
        this.isChecked = !!value[0];
    }
    init(){
        $(this.element).html(this.getTemplate({seed: this.id}));
        this.isChecked = !!this.element.data().checked;
        this.$checkbox = $(this.element).find("input");
        this.$checkbox.on("change",() => this.changeState());
        this.$checkbox.prop('checked', this.isChecked);
        this.updateElementEnabled();
        this.createKey(this.element, this);
        this.isReady = true;
        return this;
    }
    updateElementEnabled(){
        this.element.attr("data-checked", this.isChecked);
    }
    getTemplate(params){
        return `
            <input type="checkbox" class="ui-checkbox__native" id="${params.seed}" name="${this.name}">
            <label class="ui-checkbox__label" for="${params.seed}"></label>
        `;
    }
} 
export { UICheckboxController, UICheckbox };
import { UIElement } from './UIController.class.js';
class UISelect extends UIElement{
    selected = null;
    generatedOptions = {};
    constructor(params){
        super(params);
        console.warn(params);
        this.element = $(params.element);
        this.$native = $(this.element).find(".select-element__native");
        this.$header = $(this.element).find(".select-element__header");
        this.$content = $(this.element).find(".select-element__content");
        this._isShow = false;
    }
    selectOption(selectInstance){
        this.selected = selectInstance;
        this.render(selectInstance.text);
        this.isShow = false; 
    }
    getSelect(){
        return this.selected.key;
    }
    render(value){
        this.$native.val(value);
        this.$header.find("span").html(value);
        this.element.attr({"data-select": value});
    }
    generateOptions(){
        let ctx = this;
        let defaultSelect = $(this.element).data().select;
        this.$native.children().each((i, item) => {      
            let dataKey = $(item).attr("data-key");
            let key = dataKey != undefined ? dataKey : Service.generateKey(8);  
            let value = $(item).attr("value");
            let option = $(this.getOptionTemplate({
                key: key,
                value: value
            }));
            let text = $(item).attr("value");
            this.generatedOptions[key] = new UISelectOption({
                element: option,
                key: key,
                text: text, 
                controller: ctx
            }).init();
            this.$content.append(option);
        });
        this.selectOption(this.generatedOptions[defaultSelect]);
        
    }
    init(){
        $(this.element).on("click",".select-element__header",() => this.isShow = true);
        $(document).on("click", (event) => {
            if($(event.target).closest(".select-element").length) return;
            else this.isShow = false;
        });
        this.generateOptions();
        this.render(this.selected.text);
        this.createKey(this.element, this);
        return this;
    }
    set isShow(value){
        this._isShow = value;
        this.$content.css({"display": (this._isShow ? "block" : "none")});
    }
    getOptionTemplate(params){
        return `
            <div class="select-element__option" data-key="${params.key}" data-value="${params.value}">
                ${params.value}
            </div>
        `;
    }
}


class UISelectOption extends UIElement{
    controller = null;
    listeners = {
        select: []
    }
    constructor(params){
        super(params);
        this.key = params.key;
        this.element = params.element;
        this.text = params.text;
        this.controller = params.controller;
    }
    select(){
        console.warn("SELECT",this);
        this.controller.selectOption(this);
    }
    init(){
        $(this.element).on("click", () => {
            console.warn(this);
            this.select(this);
        });
        return this;
    }
}

export { UISelect, UISelectOption };
import { UIElement } from './UIController.class.js';
class UISearch extends UIElement{
    constructor(params) {
        super(params);
        this.element = params.element;
        this.input = $(this.element).find(".search-field__input");
        this.liveElement = $(this.element).find(".search-field__live-search");
        this.focusHandler = new Function;
        this.blurHandler = new Function;
        this.createdHandler = new Function;
    }
    init() {
        let focusClass = "search-field_focused";
        $(this.input).on("focus", () => {
            $(this.element).addClass(focusClass);
            this.focusHandler();
        });
        $(this.input).on("blur", () => {
            $(this.element).removeClass(focusClass);
            this.blurHandler();
        });
        this.createdHandler();
        this.createKey(this.element, this);
        return this;
    }
}

export { UISearch };
/* 

    element = HTMLElement
    currentTab = controlItem
    selectHandlers = {controlItem: callback }
*/
import { UIElement } from './UIController.class.js';
class UITabs extends UIElement{
    tabsList = [];
    props = {
        disableContent: false
    }
    constructor(params) {
        super(params); 
        $.extend(this.props, params.props);
        this.tabsList = [];
        this.element = params.element;
        this.$controls = $(this.element).find(".tabs__control__item");
        this.$content = null;
        this.currentTab = params.defaultTab || null;
        this.selectHandlers = params.selectHandlers || null;
        this.$contentItems = !this.props.disableContent ? $(this.element).find(".tabs__content") : null;
    }
    init() {
        console.log("TABS",this);
        if (!this.props.disableContent) {
            this.$controls.each((controlCounter, controlItem) => {
                let tabControlId = $(controlItem).data().tabControl;
                this.$contentItems.each((contentCounter, contentItem) => {
                    let tabContentId = $(contentItem).data().tabContent;
                    if (tabControlId == tabContentId) this.tabsList.push(new UITabsElement({
                        id: tabControlId,
                        control: $(controlItem),
                        content: $(contentItem),
                        controller: this
                    }));
                });
            });
        } else {
            this.$controls.each((controlCounter, controlItem) => {
                let tabControlId = $(controlItem).data().tabControl;
                this.tabsList.push(new UITabsElement({
                    id: tabControlId,
                    control: $(controlItem),
                    controller: this
                }));
            });
        }
        if (this.currentTab !== null) this.changeTab(this.currentTab);
        this.createKey(this.element, this);
        return this;
    }
    changeTab(id) {
        this.tabsList.forEach((item) => {
            if (item.id.indexOf(id) > -1) this._setTab(id, item.$control, item.$content);
        });
    }
    _setTab(id, $control, $content) {
        console.log(id, $control, $content);
        let activeClass = "tabs__control__item_is-active";
        if ($content != null) this.$contentItems.hide();
        this.$controls.removeClass(activeClass);
        this.tabsList.forEach((item) => {
            if (id != item.id) {
                if ($content != null) $content.show();
                $control.addClass(activeClass);
            }
        });
        this.currentTab = id;
    }
}

class UITabsElement {
    constructor(params) {
        this.id = params.id;
        this.$control = params.control;
        this.$content = params.content;
        this.controller = params.controller;
        this.$control.on("click", () => this.controller._setTab(this.id, this.$control, this.$content));
        if (params.controller.selectHandlers != null) this.$control.on("click", () => {
            let handler = params.controller.selectHandlers[this.id];
            if (handler) handler(this.id);
        });
    }
}

export { UITabs, UITabsElement };
import { UIElement } from './UIController.class.js';
class UIPreloader extends UIElement{
    _src = "/img/loader.svg";
    _showTimeoutId = 0;
    _hideTimeoutId = 0;
    props = {
        showDelay: 0,
        hideDelay: 0,
        visibility: false,
        type: "default"
    };
    constructor(params){
        super(params);
        $.extend(this.props,params.props);
        this.$container = $(params.container);
        this.showHandler = params.showHandler || new Function;
        this.hideHandler = params.hideHandler || new Function;
        this.element = $(this.getTemplate());
    }

    show(){
        clearTimeout(this._hideTimeoutId);
        this._showTimeoutId = setTimeout(() => $(this.element).removeClass("hidden"), this.props.showDelay);
    }
    hide(){
        clearTimeout(this._showTimeoutId);
        this._hideTimeoutId = setTimeout(() => $(this.element).addClass("hidden"), this.props.hideDelay);
    }
    init(){
        if(this.props.visibility) this.show();
        else this.hide();
        this.render();
        return this;
    }
    render(){
        this.element = this.$container.html(this.getTemplate());
    }
    getTemplate(){
        return `
            <div class="ui-preloader">
                <img src="${this._src}">
            </div>          
        `
    }


}
export { UIPreloader };
import { UIElement } from './UIController.class.js';
class UICarousel extends UIElement{
    slides = [];
    currentSlide = 0;
    previousSlide = 0;
    iterableTimeout = null;
    slideCount = 0;
    transitions = {
        in: "ui-carousel__slide_in",
        out: "ui-carousel__slide_out",
        active: "ui-carousel__slide_active"
    }
    props = {
        timeout: 5000
    };
    constructor(params){
        super(params);
        $.extend(this.props,params.props);
        this.element = params.element;
    }
    nextSlide(){
        let next = this.currentSlide < this.slideCount - 1 ? this.currentSlide + 1 : 0;
        this.changeSlide(this.currentSlide, next);
        return {id: this.currentSlide, slide:this.slides[this.currentSlide]};
    }
    prevSlide(){ 
        let next = this.currentSlide > 0 ? this.currentSlide - 1 : this.slideCount - 1;
        this.changeSlide(this.currentSlide, next);
        return {id: this.currentSlide, slide: this.slides[this.currentSlide]};
    }
    changeSlide(previousSlide, currentSlide){
        this.previousSlide = previousSlide;
        this.currentSlide = currentSlide;
        this.update();
        this.render();
    }
    update(){
        clearTimeout(this.iterableTimeout);
        this.iterableTimeout = setTimeout(() => {
            this.nextSlide();
            this.update();
        }, this.props.timeout);
    }
    stop(){
        clearTimeout(this.iterableTimeout);
    }
    render(){
        let prev = this.slides[this.previousSlide];
        let current = this.slides[this.currentSlide];
        $(prev.element).removeClass(this.transitions.active);
        $(current.element).show();
        $(current.element).addClass(this.transitions.active);

        this.$points.children().each((i, item) => {
            $(item).removeClass("ui-carousel__points__item_active");
            if(i == this.currentSlide) $(item).addClass("ui-carousel__points__item_active");
        })

        setTimeout(() => {
            if(prev.id != current.id) $(prev.element).hide();
        },300);
    }
    init(){
        this.$container = $(this.element).find(".ui-carousel__container");
        this.$slides = $(this.$container).find(".ui-carousel__slide"); 
        this.$next = $(this.$container).find(".ui-carousel__nav__next");
        this.$prev = $(this.$container).find(".ui-carousel__nav__prev");
        this.$points = $(this.$container).find(".ui-carousel__points");
        this.$slides.each((i, item) => {
            this.slides.push(new UISlideElement({
                id: i,
                element: $(item)
            }));
            let point = this.$points.append(`
                <div class="ui-carousel__points__item" data-slide="${i}">
                    <div class="sprite sprite-slider-point-default"></div>
                    <div class="sprite sprite-slider-point-active"></div>
                </div>
            `);
        });
        this.slideCount = this.$slides.length;
        this.$next.on("click", () => {
            this.nextSlide();
            this.update();
        });
        this.$prev.on("click",() => {
            this.prevSlide();
            this.update();
        });
        this.update();
        this.render();
        this.createKey(this.element, this);
        this.bindPointsListener();
        return this;
    }
    bindPointsListener(){
        let ctx = this;
        this.$points.on("click", ".ui-carousel__points__item", function(){
            let id = $(this).data().slide;
            ctx.changeSlide(ctx.currentSlide, id);
        })
    }
}
class UISlideElement{
    props = {};
    constructor(params){
        this.element = $(params.element);
        this.id = params.id;
    }
}

export { UICarousel, UISlideElement };

class Overlay{
    static element = $(".overlay");
    static show(callback){
        this.element.addClass("overlay_active");
        this.element.one("click",() => {
            this.hide();
            callback();
        });
    }
    static hide(){
        this.element.removeClass("overlay_active"); 
        this.element.unbind();
    }
} 
export { Overlay };

class Toast{
  static toastList = [];
  static toastNumeration = 0;
  static init(){
    $("body").append(`<div class="toast-container"></div>`);
  }
  static createToast(params){
    let toast = new ToastItem(params);
    this.toastList.push(toast);
    toast.create();
  }
}
class ToastItem{
  constructor(params){
    this.id = Toast.toastNumeration;
    Toast.toastNumeration++;
    this.content = params.content || "[Empty content]";
    this.type = params.type || DefineConst.STATUS_SUCCESS;
    this.timeout = params.timeout || 3000;
    this.callback = params.callback || new Function();
  }
  getElement(){
    return $("#toast-" + this.id);
  }
  generateTemplate(params){
    return `
      <div class="toast-item toast-item_in ${params.type}" id="toast-${params.id}">
        <div class="toast-content">${params.content}</div>
      </div> 
    `; 
  }
  get element(){
    return $("#toast-" + this.id);
  }
  create(){
    let $container = $(".toast-container");
    let template = this.generateTemplate({
      id: this.id, 
      type: this.type,
      content: this.content
    }); 
    $container.prepend(template);
    setTimeout(() => $(this.element).removeClass("toast-item_in") ,50);
    setTimeout(this.destroy.bind(this),this.timeout);
    $(this.element).on("click",() => this.destroy());
  }
  destroy(){
    $(this.element).addClass("toast-item_out");
    setTimeout(() => $(this.element).remove(), 500);
  }
}
Toast.init();
export { Toast };
import { Config } from './config.js';
class WindowState {
    static width = $(window).width();
    static isMobile = false;
    static update() {
        this.width = $(window).width();
        this.isMobile = this.width <= Config.responsive.mobileWidth;
    }
    static init() {
        $(window).on("resize", () => this.update());
        this.update();
        return this;
    }
}
WindowState.init();
export { WindowState };
import { UISearch } from './UISearch.class.js';
import { GeoCheckout } from './GeoCheckout.class.js';
const CS_DEFAULT = "CS_DEFAULT";
const CS_NOTFOUND = "CS_NOTFOUND";
const CS_LIST = "CS_LIST";



class CatalogSearchController {
    search = null;
    static init() {
        this.search = new CatalogSearchElement({
            element: $(".search-form__search-field"),
            input: $(".search-form .search-field__input")
        }).init();
    }
}

class CatalogSearchElement extends UISearch {
    _state = CS_DEFAULT;
    _inputDelayTimeout = null;
    _isLoading = false;
    minQueryLength = 3;
    overlayElement = $(".search-overlay");
    get state(){ return this._state; }
    get isLoading(){ return this._isLoading; }
    set isLoading(value){
        this._isLoading = value;
        if(value) this.preloader.show();
        else this.preloader.hide();
    }
    set state(value){
        this._state = value;
        return this.state;
    }
    constructor(params){
        super(params);    
    }
    createdHandler = () => {
        this.render(this.getTemplate(CS_DEFAULT));
        this.queryKey = $(this.element).data().key;
        this.pageId = mse2FormConfig[this.queryKey].pageId;
        $(this.input).on("input",() => {
            this.createSearchRequest($(this.input).val(), this.updateLiveSearch.bind(this));
        });
        this.preloader = new UIPreloader({
            container: $(".search-form__search-field__preloader"),
            hideDelay: 1000
        }).init();
    };
    focusHandler = () => {
        this.overlayElement.show();
        UIHelpers.scrollLock(true);
    }
    blurHandler = () => {
        this.overlayElement.hide();
        //setTimeout(() => this.render(this.getTemplate(CS_DEFAULT)), 300);
        UIHelpers.scrollLock(false);
    }
    render(value) {
        $(this.liveElement).html(value);
    }
    createSearchRequest(query, callback){
        if(query.length < this.minQueryLength) return false;
        clearTimeout(this._inputDelayTimeout);
        this._inputDelayTimeout = setTimeout(() => {
            this.isLoading = true;
            Debug.log(this, "Create Search Request", this);
            $.post(Config.dataRequest.msearch2,{
                action: "search",
                key: this.queryKey,
                pageId: this.pageId,
                query: query,
                cityKey: GeoCheckout.geoData.cityKey
            }).then((resp) => {
                Debug.log([query, JSON.parse(resp)], "Search Database Response", this);
                callback(query, resp);
                this.isLoading = false;
            }).catch((e) => {
                console.warn("SEARCH ", e);
            });
        },300);
        
    }
    setInputQuery(value){
        $(this.input).val(value);
        $(this.input).trigger("input");
        this.focusOnInput();
        //this.createSearchRequest(value, this.updateLiveSearch.bind(this));
    }
    updateLiveSearch(query, value) {
        let data = JSON.parse(value).data;
        Debug.log(data, "Update Live Search Data", this);
        if (data.results.length) {
            this.render(data.results.map((item) => this.getTemplate(CS_LIST, item)));
            this.state = CS_LIST;
        } else {
            this.render(this.getTemplate(CS_NOTFOUND));
            this.state = CS_NOTFOUND;
            Speller.checkText(query, (spellerResponse) => {
                Debug.log(spellerResponse, "Speller Response", this);
                this.createSearchRequest(spellerResponse.result, (searchQuery, searchResponse) => {
                    if(JSON.parse(searchResponse).data.results.length){
                        Debug.log(spellerResponse.result, "Speller Result", this);
                        this.render(this.getTemplate(CS_NOTFOUND, spellerResponse.result));  
                    };
                });
            })
        }
    }
    focusOnInput() {
        setTimeout(() => this.input.focus().focus(), 300);
    }
    getTemplate(type, item = null) {
        switch (type) {
            case CS_LIST:
                {
                    return `
                    <div class="search-field__live-search__item">
                        <a href="${item.url || '#'}" class="justify-between">
                            <div class="justify-start align-center">
                                <div class="search-field__live-search__item__picture">
                                    <img src="${item.image || '/assets/components/minishop2/img/web/ms2_small.png'}">
                                </div>
                                <div class="search-field__live-search__item__title">
                                    ${item.value || null} 
                                </div>
                            </div>
                            <div class="align-center">
                                <div class="search-field__live-search__item__price">
                                ${  item.price > 0 ?
                                    `<div class="search-field__live-search__item__price__value">от ${item.price} руб</div>` :
                                    `<div class="search-field__live-search__item__price__notfound">Нет в наличии</div>`
                                }
                                
                                </div>
                            </div>
                        </a>   
                    </div> 
                `
                }
            case CS_NOTFOUND:
                {
                    return `
                    <div class="search-field__live-search__not-found">
                        <div class="search-field__live-search__not-found__item">
                            По вашему запросу ничего не найдено
                        </div>
                        <div class="${item == null ? 'hidden ': ''}highlight-links search-field__live-search__not-found__item">
                            Возможно вы имели ввиду
                            <a onClick="CatalogSearchController.search.setInputQuery('${item}')">${item}</a>?
                        </div>
                        <div class="search-field__live-search__not-found__item">
                            <div class="ex-10">Не можете найти нужный товар?</div>
                            <div style="font-size: 30px" class="ex-10">
                                +7 (4842) <span class="highlight-text_bold">56-27-88</span> 
                            </div>
                            <div class="ex-10">
                                Позвоните нам, и мы поможем! Круглосуточно
                            </div>
                        </div>
                        
                    </div>
                `
                }
            case CS_DEFAULT:
                {
                    return `
                <div class="search-field__live-search__item justify-start align-center">
                    <div class="search-field__live-search__item__title">
                        Введите поисковый запрос
                    </div>
                </div>     
                `
                }
        }
    }
}
export { CatalogSearchController, CatalogSearchElement };
import { Config } from './config.js';
class Cart {
    static _products = [];
    static init() {
        $(".product").each((i, item) => {
            this._products.push(new CartProduct({
                id: i,
                element: $(item),
                productForm: $(item).find(".stages__cart__product__form"),
                deleteForm: $(item).find(".product__delete"),
                countField: $(item).find(".product__count__input"),
                priceField: $(item).find(".product__price__input"),
                sumView: $(item).find(".product__sum"),
                uiCounter: $(item).find(".product__count")
            }));
        });
        this.calculateDiscountProgress();
        this.renderTotalPrice();
        this.helpers();
    }
    static getProgressivePrice() {
        let percent = 0;
        Config.price.discountProgressStageValues.forEach((discount) => {
            if (this.getTotalPrice().progressivePrice >= discount.price) {
                percent = discount.percent;
            }
        });
        return {
            price: (this.getTotalPrice().progressivePrice - (this.getTotalPrice().progressivePrice / 100 * percent)) +
                this.getTotalPrice().discountPrice,
            percent: percent
        }

    }
    static getProducts() {
        return this._products;
    }
    static getTotalPrice() {
        let total = { 
            summaryPrice: 0,
            progressivePrice: 0, 
            discountPrice: 0
        }
        this.getProducts().forEach((item) => {
            total.summaryPrice += item.getProductSummary();
            total.progressivePrice += !item.discount ? item.getProductSummary() : 0;
            total.discountPrice += item.discount ? item.getProductSummary() : 0;
        });
        
        return total;
    }
    static calculateDiscountProgress(){
        let element = $(".discount-progress__progress");
        let discountProgress = (this.getTotalPrice().progressivePrice / Config.price.maxDiscountProgress) * 100;
        $(".js-order-info-progress").css({
            width: this.getTotalPrice().progressivePrice < Config.price.maxDiscountProgress ? (discountProgress > 7 ? discountProgress + "%" : "28px") : "100%"
        });
        $(".js-cart-discount-percent").text(this.getProgressivePrice().percent);
    }
    static removeProduct(product) {
        $(product.deleteForm).submit();
        $(product.element).addClass("product_removed");
        setTimeout(() => $(product.element).remove(), 300);
        this._products.splice(product.id, 1);
        if (this.getProducts().length <= 0) setTimeout(() => location.reload(), 1000);
        this.renderTotalPrice();
        Debug.log(product, "Remove Product", this);
        

    } 
    static renderTotalPrice() {
        this.calculateDiscountProgress();
        let price = this.getProgressivePrice().price;
        Debug.log([price], "Render Total Price", this);
        $(".js-cart-total-price").text(price.toFixed(2));
        $(".js-cart-basic-container").css({display: Cart.getProgressivePrice().percent > 0 ? "block": "none"});
        $(".js-cart-basic-price").text(this.getTotalPrice().summaryPrice.toFixed(2));
    }
    static helpers() {
        let onOrderConfirm = (e) => {
            if (Cart.getTotalPrice().summaryPrice < Config.price.orderMinPrice) {
                e.preventDefault();
                Toast.createToast({
                    content: "Минимальная сумма заказа " + Config.price.orderMinPrice + " руб.",
                    type: "error"
                });
            }
        };
        $(".js-order-confirm").on("click", onOrderConfirm);
    }
}
export { Cart };
class CartProduct {
    constructor(params) {
        let productContext = this;
        this.id = params.id;
        this.element = params.element;
        this.productForm = params.productForm;
        this.deleteForm = params.deleteForm;
        this.countField = params.countField;
        this.priceField = params.priceField;
        this.sumView = params.sumView;
        this.priceValue = parseFloat($(this.priceField).val());
        this.countValue = parseInt($(this.countField).val());
        this.maxCountValue = $(this.countField).data().maxcount;
        this.discount = !!($(this.priceField).data().discount);
        this.uiCounter = new UICounter({
            element: $(params.uiCounter),
            defaultValue: productContext.countValue,  
            maxCount: productContext.maxCountValue,
            increaseHandler() {
                let maxCount = $(productContext.countField).data().maxcount;
                if (productContext.countValue > maxCount) {
                    this.decrease();
                    Toast.createToast({
                        type: DefineConst.STATUS_ERROR,
                        content: Config.strings.moreAvailableLimit + ` ${this.maxCount}`
                    })
                }
            },
            changeHandler() { 
                productContext.countValue = this.count;
                $(productContext.countField).val(this.count);
                $(productContext.sumView).text(productContext.getProductSummary().toFixed(2) + " руб.");
                $(productContext.productForm).submit();
                Cart.renderTotalPrice();
            },
            overflowHandler(){
                Toast.createToast({
                    type: DefineConst.STATUS_ERROR,
                    content: Config.strings.moreAvailableLimit + ` ${this.maxCount}`
                })
            }
        }).init();
        this.init()
    }

    getProductSummary() {
        return this.priceValue * this.countValue;
    }
    init() {
        this.deleteForm.on("click", () => Cart.removeProduct(this));
    }

}
export { CartProduct };
class GeographyOrder {
    static orderList = [];
    static frames = [];
    static isCompleted = false;
    static isRendered = false;

    static init() {
        $(".js-choose-geo").each((i, item) => {
            let data = $(item).data();
            this.orderList.push(new GeographyOrderProductsList({
                element: $(item),
                products: data.products,
                id: data.name,
                adress: data.adress,
                action: data.action,
                price: data.cost,
                enabled: data.enabled
            }).init());
            this.isCompleted = true;
        });
        $(".stages__geo__frame-control").each((i, item) => {
            this.frames.push(new GeographyOrderFrame({
                element: $(item).attr("data-frame"),
                control: $(item)
            }).init());
        });
        $(".stages__geo__order__back").on("click", () => this.mobileOrderDetailShow(false));
        this.helpers();
    }
    static getOrderList() {
        return this.orderList;
    }
    static notifyState(value) {
        let $notify = $(".stages__geo__order__notify");
        if (value) $notify.show();
        else $notify.hide();
    }
    static mobileOrderDetailShow(value) {
        let selector = "stages__geo__order_show";
        let $order = $(".stages__geo__order");
        if (value) $order.addClass(selector);
        else $order.removeClass(selector);
        UIHelpers.scrollLock(value);
    }
    static helpers() {
        $(".js-popup-delivery-unavailable").on("click", function () {
            $.fancybox.open({
                src: "/components/delivery-unavailable.php",
                type: "ajax"
            });
        });
    }
    static getTemplate(params) {
        return `
        <div class="stages__geo__order__detail__item">
            <div class="stages__geo__order__detail__item__status">
                <div class="sprite ${params.instock ? "sprite-status-success-small" : "sprite-status-error-small"}"></div>
            </div>
            <div class="stages__geo__order__detail__item__title">
                ${ params.pagetitle }
            </div>
            <div class="stages__geo__order__detail__item__count">
                <nobr>
                ${ params.missingCount == 0 ?
                    params.count + " шт" :
                        (params.enabled) ?
                        params.count + " / " + params.maxCount + " шт" :
                        ""  
                }
                 </nobr>
            </div>
            <div class="stages__geo__order__detail__item__available${!params.instock ? " stages__geo__order__detail__item__available_false" : ""}">
                ${ params.instock ? "В наличии" : "Недоcтупен" }
            </div>
        </div>`
    }

}

class GeographyOrderFrame{
    constructor(params){
        this.element = $("#" + params.element);
        this.control = $(params.control);
    }
    init(){
        this.control.on("click", this.select.bind(this));
        return this;
    }
    select(){
        GeographyOrder.frames.forEach(item => {
            if(item == this) $(this.element).show();
            else $(item.element).hide();
        })
    }
}

class GeographyOrderProductsList {
    constructor(params) {
        this.products = params.products;
        this.element = params.element;
        this.id = params.id;
        this.adress = params.adress;
        this.action = params.action;
        this.price = params.price;
        this.enabled = params.enabled;
    }
    init() {
        $(this.element).on("click", this.renderList.bind(this));
        return this;
    }
    renderList() {
        let $detail = $(".stages__geo__order__detail");
        if (!GeographyOrder.isRendered) {
            $(".js-order-container").show();
            $(".js-order-placeholder").hide();
        }
        let $desc = $(".js-order-description");
        if (this.action.indexOf("delivery") > -1) $desc.html(`Товары доступные для доставки:`);
        if (this.action.indexOf("pickup") > -1) $desc.html(`Наличие товаров в Аптеке №${this.id}<br>по адресу ${this.adress}:`);

        $(".js-order-pharmacy-id").text(this.id);
        $(".js-order-pharmacy-adress").text(this.adress);
        $(".js-order-price").text(this.price);

        let $button = $(".js-order-button");
        if (this.enabled) $button.removeClass("button_disabled");
        else $button.addClass("button_disabled");
        $button.attr({
            "href": this.enabled ? "order?action=" + this.action : "#"
        });
        $detail.html(
            this.products.map((item) => GeographyOrder.getTemplate(item))
        );

        GeographyOrder.notifyState(!this.enabled && this.action == "delivery");
        
        if (WindowState.isMobile) GeographyOrder.mobileOrderDetailShow(true);
        GeographyOrder.isRendered = true;
        let activeClass = "stages__geo__choose__item_active";
        GeographyOrder.getOrderList().forEach((item) => {           
            if(item == this) item.element.addClass(activeClass);
            else item.element.removeClass(activeClass);
        })
    }
}
export { GeographyOrder, GeographyOrderProductsList };
import { Config, DefineConst } from "./config";
import { Service } from "./Service.class";
import { Debug } from "./Debug.class";

class OrderStage{
    static checkbox = null;
    static promo = null;
    static form = null;
    static init(){
        this.confirmPolicyCheck();
        this.promoInit();
        this.form = $(".stages__order__main-form");
        this.form.on("submit", (e) => {
            e.preventDefault();
            console.log('SUBMIT');
            this.generateOrder();
        });
    }
    static promoInit(){
        this.promo = new Promo({
            form: $(".stage__order__promo"),
            props: {
                successPromoHandler: (resp) => {
                    $(".js-order-price").html(`
                        <div style="display: inline-block">
                            <div class="price-now">${resp.conditions.currentPrice}</div>
                        </div>
                    `);
                }
            }
        }).init();
    }
    static generateOrder(){
        let formArray = this.form.serializeArray();
        let formData = {};
        formArray.forEach(item => {
            formData[item.name] = item.value
        });
        formData = Object.assign(formData, {
            promo: this.promo.currentCode,
            ctx: "web"
        });
        let orderAddData =  {
            key: "phone",
            value: formData.phone,
            ms2_action: "order/add",
            ctx: "web"
        }
        formData['m2_action'] = "order/add";
        console.log(formData);
        $.post(Config.dataRequest.minishop2, orderAddData).then(resp => {
            Debug.log(JSON.parse(resp), "Add Order Response", this);
            $.post(Config.dataRequest.minishop2, Object.assign(formData, {
                ms2_action: "order/submit"
            })).then((resp) => {        
                let response = JSON.parse(resp);
                Debug.log(response, "Submit Order Response", this);
                if(response.success){
                    location.href = `/order?action=${Service.getQueryParams().action}&msorder=${response.data.msorder}`;
                } else {
                    Toast.createToast({
                        type: DefineConst.STATUS_ERROR,
                        content: "Ошибка оформления заказа"
                    });
                }
                
            });
        })
        /*
        
        */
    }
    static confirmPolicyCheck(){
        let $element = $("#order-policy-confirm");
        let $orderButton = $("#order-button");
        UIController.awaitReady($element).then((controller) => {            
            console.warn("!!!");
            controller.addListener('onCheckActive',() => {
                $orderButton.prop("disabled",false);
                $orderButton.removeClass("button_disabled");
            });
            controller.addListener('onCheckDeactive',() => {
                $orderButton.prop("disabled",true);
                $orderButton.addClass("button_disabled");
            });
            if(controller.isChecked) controller.callListeners('onCheckActive');
            else controller.callListeners('onCheckDeactive');

        });
        this.checkbox = UIController.getControllerByElement($element);
    }
}
export { OrderStage };
import { YandexMapApi } from "./YandexMapApi.class";

class ProductPage {
    static init() {
        this.bindCounter();
        this.modalImagePreview();
        this.descriptionFormatting();
        this.generateTabs();
        this.pharmacyInfo();
    }
    static pharmacyInfo(){
        let map = null;
        let bindModal = (item) => {
            let id = $(item).data().id;
            PharmacyInfo.ready(() => {
                let pharmacy = PharmacyInfo.getPharmacy(id, "pharmacyCode"); 
                let prefix = ".js-pharmacy-info-";
                if(pharmacy.photoUrl != null) $(prefix + "image").css({backgroundImage: `url(${pharmacy.photoUrl})`}).show();
                else $(prefix + "image").hide();
                $(prefix + "title").html(pharmacy.title);
                $(prefix + "adress").html(pharmacy.adress);
                $(prefix + "phone").html(pharmacy.phone);
                $(prefix + "worktime").html(pharmacy.worktime);
                $(prefix + "link").attr("href","/pharmacy/" + pharmacy.alias);
                map.removePoints();
                map.addPoint({
                    coords: pharmacy.coords
                });
                map.mapInstance.setBounds(map.mapInstance.geoObjects.getBounds(),{
                    checkZoomRange: true
                }).then(() => {
                    map.mapInstance.setZoom(14);
                });
                $.fancybox.open({src: "#pharmacy-info-popup", type: "inline"});
            });
        }
        YandexMapApi.ready().then(() => {
            map = YandexMapApi.createMap("pharmacy-info-map");
            $(".js-product-pharmacy-item").each((i, item) => {
                $(item).on("click", () => bindModal(item));
            });
        });
        
        
        
    }
    static bindCounter() {
        $(".product__count").each((i, item) => new UICounter({
            element: $(item),
            maxCount: $(".product__count__input").data().maxcount,
            overflowHandler(){
                Toast.createToast({
                    type: DefineConst.STATUS_ERROR,
                    content: Config.strings.moreAvailableLimit + ` ${this.maxCount}`
                });
            }, 
            changeHandler() {
                $(".product__count__input").val(this.count);
            }
        }).init());
    }
    static modalImagePreview(){
        let bindModal = function(element){
            $.fancybox.open({
                type: "image",
                src: $(element).attr("src")
            })
        }
        $(".product-page__container__product__container__preview__picture img").on("click",(event) => bindModal(event.target));
    }
    static descriptionFormatting() {
        let $descItem = $(".product-page__container__description__item");
        let showSelector = "product-page__container__description__item__text_is-show";
        $descItem.on("click", ".js-product-desc-title", function () {
            let $text = $(this).next();
            if (!$text.hasClass(showSelector)) $text.addClass(showSelector);
            else $text.removeClass(showSelector); 
        })
        $descItem.each(function (i, item) {
            // Хоть как то форматируем ущербно приходящие данные. 
            let content = $(item).html();
            content = content
                .split(";").join(";<br>")
                .split(".").join(". ")
                .split(":").join(": ");
            $(item).html(content);
        });
    }
    static generateTabs(){
        let isOptics = !!$(".optics-product").length;
        $(".tabs").each((i, item) => new UITabs({
            element: $(item),
            defaultTab: !isOptics ? "list" : "desc"
        }).init());
    }
}
export { ProductPage };


class OpticsController {
    static currentOptics = null;
    static selectsList = [];
    static init() {
        let $element = $(".optics-product");
        let type = $element.data().optics;
        let template = {
            element: $element,
            type: type
        };
        if (Object.is(type, DefineConst.OPTICS_GLASSES)) this.currentOptics = new Glasses(template).init();
        if (Object.is(type, DefineConst.OPTICS_LENSES)) this.currentOptics = new Lenses(template).init();
        Debug.log([this.currentOptics], "Current Optics", this);
        this.helpers();
        this.generateSelect();
    }
    static createOrder(order) {
        $.post(Config.endpoints.optics, {
            optics: order
        }).then((resp) => {
            let result = JSON.parse(resp);
            $(".js-optics-order-number").html(result.data.orderNumber);
            $.fancybox.open({
                type: "inline",
                src: "#popup_success_optics"
            });
            Debug.log([order, resp], "Create Order", this);
        }).catch(() => {
            alert("Не удалось отправить запрос");
        });
    }
    static set equalsEyes(value) {
        let $element = $(".optics-product__second-variant");
        if (value) $element.addClass("hidden");
        else $element.removeClass("hidden");
    }
    static generateSelect(){
        $(".select-element").each((i, item) => {
            let s = new UISelect({
                element: $(item)
            }).init();
            this.selectsList.push(s);
            console.log(s);
        });
    }
    static helpers() {
        let openOrderPopup = () => {
            $.fancybox.open({
                src: "#popup_order_optics",
                type: "inline"
            });
        }
        let submitOrderForm = (e) => {
            e.preventDefault();
            let personArray = $(e.target).serializeArray();
            let personInfo = {};
            let order = OpticsController.currentOptics.generateOrder();
            for (var item of personArray) {
                personInfo[item.name] = item.value;
            }
            Debug.log(order, "Optics Order", this);
            OpticsController.createOrder({
                id: $(".optics-id").val(),
                params: order,
                person: {
                    name: personInfo.name,
                    phone: personInfo.phone,
                    email: personInfo.email
                }
            });
            $.fancybox.close();
        }
        $(".optics-product__counter").each((i, item) => new UICounter({
            element: $(item)
        }).init());
        /*
        $(".select-element").each((i, item) => {
            console.warn(item);
            let select = new UISelect({
                element: $(item)
            }).init();
            console.warn(select);
            this.selectsList.push(select); 
            //generateSelectsList(item)
        });
        */
        $(".js-optics-order").on("click", openOrderPopup);
        $(".js-optics-send").on("submit", submitOrderForm);
    }
}
class OpticsElement {
    constructor(params) {
        this.element = params.element;
        this.equalsState = params.equalsState || true;
        this.type = params.type;
        this.count = 1;
        this.eyes = {
            left: null,
            right: null
        };
    }
    init() {
        $("#optics-equals").on("change", (e) => OpticsController.equalsEyes = $(e.target).prop("checked"));
        return this;
    }
    getField(value, type) {

        let element = $(`.optics-field[data-optics="${value}"]`)[0];
        if (type == DefineConst.UI_SELECT) return element.dataset.select;
        if (type == DefineConst.UI_COUNTER) return element.dataset.count;
        if (type == DefineConst.INPUT_CHECKBOX) return element.checked;
        if (type == DefineConst.INPUT_TEXT) {
            return element.value;
        }
        return element;
    }

}
class Lenses extends OpticsElement {
    constructor(params) {
        super(params);
        this.eyes.left = this.template.lense;
        this.eyes.right = this.template.lense;
    }
    generateOrder() {
        this.equals = this.getField("equals-eyes", DefineConst.INPUT_CHECKBOX);
        this.eyes = {
            left: {
                opticalStrength: this.getField("lense-strength-left", DefineConst.UI_SELECT),
                opticalRadius: this.getField("lense-radius-left", DefineConst.UI_SELECT),
                count: this.getField("lense-count-left", DefineConst.UI_COUNTER)
            },
            right: {
                opticalStrength: this.getField("lense-strength-right", DefineConst.UI_SELECT),
                opticalRadius: this.getField("lense-radius-right", DefineConst.UI_SELECT),
                count: this.getField("lense-count-right", DefineConst.UI_COUNTER)
            }
        }
        return {
            type: this.type,
            equals: this.equals,
            count: this.count,
            eyes: this.eyes
        };
    }
    get template() {
        return {
            lense: {
                opticalStrength: 0,
                opticalRadius: 0,
                count: 1
            }
        }
    }
}
class Glasses extends OpticsElement {
    constructor(params) {
        super(params);
        this.eyes.left = this.template.glass;
        this.eyes.right = this.template.glass;
        this.count = this.template.count;
    }
    generateOrder() {
        this.equals = this.getField("equals-eyes", DefineConst.INPUT_CHECKBOX);
        this.count = this.getField("glass-counter", DefineConst.UI_COUNTER);
        this.eyes = {
            left: {
                opticalStrength: this.getField("glass-strength-left", DefineConst.UI_SELECT),
                cover: this.getField("glass-cover-left", DefineConst.UI_SELECT),
                axis: this.getField("axis-left", DefineConst.INPUT_TEXT),
                astigmatic: this.getField("glass-astigmatic-left", DefineConst.INPUT_CHECKBOX)
            },
            right: {
                opticalStrength: this.getField("glass-strength-right", DefineConst.UI_SELECT),
                cover: this.getField("glass-cover-right", DefineConst.UI_SELECT),
                axis: this.getField("axis-right", DefineConst.INPUT_TEXT), 
                astigmatic: this.getField("glass-astigmatic-right", DefineConst.INPUT_CHECKBOX)
            }
        }
        return {
            type: this.type,
            equals: this.equals,
            count: this.count,
            eyes: this.eyes
        };
    }
    get template() {
        return {
            count: 1,
            glass: {
                opticalStrength: 0,
                cover: DefineConst.OPTICS_DEFAULT_COVER,
                astigmatic: false
            }

        }
    }
}
export { OpticsController, OpticsElement, Lenses, Glasses };
import { Config } from './config.js';
import { GeoCheckout } from './GeoCheckout.class.js';
class FeedbackController {
    static forms = {};
    static createForm(params) {
        this.forms[params.name] = new FeedbackForm(params).init();
    }
    static showForm(key) {
        this.forms[key].show();
    }
    static sendForm(key) {
        this.forms[key].send();
    }
}

class FeedbackForm {
    props = {
        endpoint: Config.endpoints.feedback,
        popup: null,
        urlParams: null,
        submitHandler: new Function,
        successHandler: new Function,
        errorHandler: new Function
    }
    constructor(params) {
        $.extend(this.props, params.props);
        this.action = params.action;
        this.name = params.name;
        this.form = params.form;
    }
    init() {
        let ctx = this;
        $(this.form).on("submit", (event) => {
            ctx.send();
            event.preventDefault();
        });
        return this;
    }
    show() {
        if (this.props.popup != null) {
            $.fancybox.open({
                src: this.props.popup,
                type: "inline"
            });
        }
    }
    send() {
        let formData = $(this.form).serialize();
        let query = `msg_action=${this.action}&${formData}&cityName=${GeoCheckout.geoData.cityName}`;
        console.log(this);
        Debug.log(query, "Feedback Send Query", this);
        $.post(this.props.endpoint, query).then((resp) => {
            let response = JSON.parse(resp);
            Debug.log([response, this.name], "Feedback Response", this);
            this.props.submitHandler(response);
            if(response.status == DefineConst.STATUS_SUCCESS){
                AnalyticsController.counter.callTarget(`Feedback${Service.letterCase(this.name)}Submit`);
                this.props.successHandler(response);
            }
            else this.props.errorHandler(response);
        });
    }
}
class FeedbackBinding {
    static successPopupHandler = (resp) => {
        $.fancybox.close();
    }
    static submitPopupHandler = (resp) => {
        Toast.createToast({ content: resp.message, type: resp.status });
    }
    static init() {
        FeedbackController.createForm({
            name: "question",
            action: "question",
            form: $("#popup_feedback_question form"),
            props: {
                popup: "#popup_feedback_question",
                submitHandler: this.submitPopupHandler,
                successHandler: this.successPopupHandler
            }
        });
        FeedbackController.createForm({
            name: "error",
            action: "error",
            form: $("#popup_feedback_error form"),
            props: {
                popup: "#popup_feedback_error",
                submitHandler: this.submitPopupHandler,
                successHandler: this.successPopupHandler 
            }
        });
        FeedbackController.createForm({
            name: "rare",
            action: "rare",
            form: $("#popup_feedback_rare form"),
            props: {
                popup: "#popup_feedback_rare",
                submitHandler: this.submitPopupHandler,
                successHandler: this.successPopupHandler 
            }
        });
        FeedbackController.createForm({
            name: "review",
            action: "review",
            form: $("#popup_feedback_review form"),
            props: {
                popup: "#popup_feedback_review",
                submitHandler: this.submitPopupHandler,
                successHandler: this.successPopupHandler 
            }
        });
        FeedbackController.createForm({
            name: "call",
            action: "call",
            form: $("#popup_feedback_call form"),
            props: {
                popup: "#popup_feedback_call",
                submitHandler: this.submitPopupHandler,
                successHandler: this.successPopupHandler 
            }
        });
        FeedbackController.createForm({
            name: "subscribe",
            action: "subscribe", 
            form: $(".subscribe__form"),
            props: {
                successHandler: () => {
                    $(".subscribe__form").html(`
                        <span class="highlight-text_green">${Config.strings.feedbackSubscribe}</span>
                    `);
                }
            } 
        });
        FeedbackController.createForm({
            name: "manufacture",
            action: "manufacture",
            form: $(".manufacture-form"),
            props: {
                successHandler: (resp) => {
                    Debug.log(resp, "Manufacture Response", this);
                    $(".manufacture-form").html(`
                        <span class="highlight-text_green">${Config.strings.feedbackRequest}</span>
                    `);
                }
            }
        });

        FeedbackController.createForm({
            name: "postOrderReview",
            action: "review",
            form: $("#post-order-review"),
            props: {
                successHandler: () => $("#post-order-review").html(`<span class="highlight-text_green">Спасибо за ваш отзыв</span>`)
            }
        });

        FeedbackController.createForm({
            name: "reviewPageForm",
            action: "review",
            form: $("#review-page-form"),
            props: {
                successHandler: () => $("#review-page-form").html(`<span class="highlight-text_green">Спасибо за ваш отзыв</span>`)
            }
        });

        FeedbackController.createForm({
            name: "pharmacyPage",
            action: "review",
            form: $("#pharmacy-feedback"),
            props: {
                successHandler: () => $("#pharmacy-feedback").html(`<span class="highlight-text_green">Ваша заявка отправлена</span>`)
            }
        });

        $(".js-popup-feedback-show").each((i, item) => $(item).on("click",() => FeedbackController.forms[$(item).data().action].show()));

    }
}
FeedbackBinding.init(); 
export { FeedbackController, FeedbackForm, FeedbackBinding };
var Template = (function () {
  var _export = {
    html: function (params) {
      $(params.selector).html(params.data);
    },
    append: function (params) {
      $(params.selector).append(params.data);
    },
    prepend: function (params) {
      $(params.selector).prepend(params.data);
    },
    requireComponent: function (params) {
      $.ajax({
        url: params.path + "?" + $.param(params.templateParams),
        success: function (resp) {
          params.handler({
            data: resp,
            selector: params.selector
          });
        }
      });
    }
  };
  return _export;
})();


// I NEED REFACTOR
class Catalog {
    static init() {
        let bindExpanderEvents = (i, item) => {
            let expander = $(item).find(".js-filter-expand");
            let filter = $(item).find(".js-filter-item");
            let expandFilterBlock = () => {
                $(expander).find(".icon").toggleClass("rotate180");
                $(filter).toggleClass("catalog-container__sidebar__item__filter_is-compress");
            }
            $(expander).on("click", expandFilterBlock);
        };
        $(".catalog-container__sidebar__item").each((i,item) => bindExpanderEvents(i, item));
    }
    static showOrderInfo(data) {
        let cost = data.data.total_cost;
        let count = data.data.total_count;
        $(".js-order-info-count").html(count);
        $(".js-order-info-cost").html(cost);
        $.fancybox.open({
            type: "inline",
            src: "#popup_order_info"
        });
        let discountProgress = (data.data.sum / Config.price.maxDiscountProgress) * 100;
        $(".js-order-info-progress").css({
            width: cost < Config.price.maxDiscountProgress ? (discountProgress > 5 ? discountProgress + "%" : "5%") : "100%"
        });
    }
    static addToCart(element) {
        AnalyticsController.counter.callTarget("ProductAddToCart");
        $(element).closest(".card__form-submit").submit();
    }
    static orderProduct(element) {
        let $field = $(element).closest(".product__field");
        let fieldContent = {
            picture: $field.find("[name='picture']").val(), 
            title: $field.find("[name='title']").val(),
            id: $field.find("[name='id']").val()
        };
        Debug.log(fieldContent, "Order Field Content", this);
        $.fancybox.open({
            src: "#popup_order_product",
            type: "inline"
        });
        $(".js-popup-order-product-picture").attr({src: fieldContent.picture});
        $(".js-popup-order-product-title").html(fieldContent.title);
        $(".js-popup-order-product-id").val(fieldContent.id);
    }
    static changeCartButtonCount(data) {
        let $cost = $(".js-mini-cart-cost");
        let $count = $(".js-mini-cart-count");
        if (data.data.total_cost > 0) {
            $cost.html(data.data.total_cost + " руб.");
            $count.css({
                display: "inline-flex"
            });
            $count.html(data.data.total_count);
        } else {
            $cost.html("Корзина");
            $count.hide();
        }
    }
}
export { Catalog };
// I NEED REFACTOR
class MiniCart {
  static update(data) {
    if ($(".mini-cart").length) {
      let cart = data.data.cart;
      if (cart.length > 6) this.miniCartList.customScroll();
      else this.miniCartList.customScroll('destroy');
      this.listItems.html(cart.map((item) => this.getTemplate(item)));
      if (cart.length > 0) $(".mini-cart__content").removeClass("hidden");
      else $(".mini-cart__content").addClass("hidden");
    }

  }
  static removeItem(item) {
    $(item).closest(".mini-cart__form-delete").submit().hide();
  }
  static init() {
    if ($(".mini-cart").length) {
      this.miniCartList = $(".mini-cart__content__list");
      this.listItems = $(".mini-cart__content__list__items");
      if (this.listItems.children().length >= 6) {
        this.miniCartList.customScroll();
      }
      this.listItems.on("click", ".mini-cart__form-delete", function () {
        let removedItemId = $(this).data("id");
        $("#" + removedItemId).hide();
      });
    }

  }
  static getTemplate(item, i) {
    return `
      <div class="mini-cart__content__list__item">
        <div class="mini-cart__content__list__item__el mini-cart__content__list__item__title">
          ${item.name}
        </div>
        <div class="mini-cart__content__list__item__el mini-cart__content__list__item__count">
          ${item.count} шт.
        </div>
        <div class="mini-cart__content__list__item__el mini-cart__content__list__item__price">
          ${item.cost} руб.
        </div>
        <form method="post" class="mini-cart__form-delete ms2_form">
          <input type="hidden" name="key" value="${item.key}">
          <button class="button button_round" type="submit" name="ms2_action" value="cart/remove">
            <div class="row-product__delete-button sprite sprite-cart-remove"></div>
          </button>
        </form>
      </div>
    `;
  }
}
export { MiniCart };
/*
var pharmaciesList = [];
$.post(Config.dataRequest.pharmacies).then((resp) => {
    var coordsCount = 0;
    resp.forEach((item, i) => {
        YandexMapApi.coordsByAdress(item.adress).then((coords) => {
            coordsCount++;
            $.extend(item, {coords: coords});
            console.log(item);
            pharmaciesList.push(item);
        }).catch((e) => {
            alert(e);
        });
        
    });
    
});
function getSortPharmacies(){
    return pharmaciesList.sort((a, b) => {
        a = parseInt(a.id);
        b = parseInt(b.id);
        if (a > b) return 1;
        if (a < b) return -1;
    });
    
}
*/








/*
const GEO_NETWORK_DEFAULT = "default";
const GEO_NETWORK_POINT = "point";
const GEO_NETWORK_DELIVERY = "delivery";
const GEO_NETWORK_OPTICS = "optics";
const GEO_NETWORK_TEMPLATE_PLACEMARK = "GEO_NETWORK_TEMPLATE_PLACEMARK";
const GEO_NETWORK_TEMPLATE_PHARMACY = "GEO_NETWORK_TEMPLATE_PHARMACY";
class GeoNetwork{
    static filterTabs = null;
    static mapController = null;
    static pharmacyPoints = [];
    static placemarksCollection = [];
    static defaultFilter = GEO_NETWORK_POINT;
    static isReady = false;
    static init(){
        $(document).ready(() => ymaps.ready(this.awaitMapReady.bind(this)));
        let geo = this;
        this.filterTabs = new UITabs({
            element: $(".js-filter-tabs"),
            defaultTab: "point",
            selectHandlers: {
                point: () => geo.createPlacemarks(geo.filterPoints(GEO_NETWORK_POINT)),
                optics: () => geo.createPlacemarks(geo.filterPoints(GEO_NETWORK_OPTICS)),
                default: () => geo.createPlacemarks(geo.filterPoints(GEO_NETWORK_DEFAULT))
            },
            props: {
                disableContent: true
            }
        }).init();
    }
    static awaitMapReady(){
        this.mapController = new ymaps.Map("ymap-container", {
            center: [54.510150, 36.254574], 
            zoom: 12,
            controls: []
        });
        this.requestPharmacyData();
    }
    static requestPharmacyData(){   
        $.post(Config.dataRequest.pharmacies).then((response) => {
            this.isReady = true;
            this.pharmacyPoints = response;
            this.createPlacemarks(this.filterPoints(this.defaultFilter));
        }).catch((e) => {
            alert("ERROR REQUEST",e);
        });
        
    }
    static filterPoints(value){
        if(!this.isReady) return false;
        this.removePlacemarks();
        let filteredCollection = [];
        this.pharmacyPoints.forEach((item) => {
            if(value != GEO_NETWORK_DEFAULT){
                if(item.props[value]) filteredCollection.push(item);
            } else filteredCollection.push(item);
        });
        return filteredCollection;
        
    }
    static renderList(points){

    }
    static createPlacemarks(points){
        if(!this.isReady) return false;
        //Geo Map Objects
        let collection = new ymaps.GeoObjectCollection();
        let geoObjectsList = points.map((item) => new ymaps.Placemark(item.coords, {
            hintContent: item.name, balloonContent: this.getTemplate(GEO_NETWORK_TEMPLATE_PLACEMARK)
        }));
        geoObjectsList.map(item => collection.add(item));
        this.mapController.geoObjects.add(collection);
        this.placemarksCollection = collection;   

        // Render List
        $(".js-pharmacy-list").html(points.map((item) => {
            return this.getTemplate(GEO_NETWORK_TEMPLATE_PHARMACY, item);
        }));   
    }
    static removePlacemarks(){
        this.mapController.geoObjects.remove(this.placemarksCollection);
    }
    static getTemplate(template, item = null){
        switch(template){
            case GEO_NETWORK_TEMPLATE_PLACEMARK:{
                return `
                    <img src="https://media2.giphy.com/media/qQx7B5z3hG19K/giphy.gif" style="width: 200px">
                `;
            }
            case GEO_NETWORK_TEMPLATE_PHARMACY:{
                return `
                    <div class="geo-network__pharmacy__item">
                        <div class="geo-network__pharmacy__item__title">
                            ${item.name}
                        </div>
                            <div class="geo-network__pharmacy__item__adress">
                                ${item.adress}
                            </div>
                        <div class="geo-network__pharmacy__item__actions">
                            <div class="highlight-links">
                                <a href="/network?id=${item.pharmacyId}">Подробнее</a> 
                            </div>
                        </div>  
                    </div>
                `;
            }
        }
        
    }
}
   
*/


class GeoNetwork {
    static map = null;
    static pharmacies = [];
    static init() {
        PharmacyInfo.ready(() => {
            this.pharmacies = PharmacyInfo.getInfo();
            this.generateMap();
            this.generateList(this.pharmacies);
            this.selectBinding();
        });
    }
    static generateMap() {
        YandexMapApi.ready().then(() => {
            this.map = YandexMapApi.createMap("geo-network-map");
            this.generatePlacemarks(this.pharmacies);
            /*
            this.map.mapInstance.setBounds(this.map.mapInstance.geoObjects.getBounds(),{
                checkZoomRange: true
            });
            */
            //this.map.mapInstance.setBounds(this.map.mapInstance.geoObjects.getBounds());
        });
    }
    static generatePlacemarks(data){
        data.map((item) => {
            if (item.coords != null) {
                this.map.addPoint({
                    coords: item.coords,
                    icon: `<span style="font-size: 12px; line-height: 10px; margin: 0; padding: 0;">${item.shortName}</span>`,
                    hint: item.title,
                    clickHandler: () => location.href = "/pharmacy/" + item.alias
                });
            }
        });
    }
    static generateList(data) {
        let $list = $(".geo-network__list");
        let template = [];
        data.map((item) => {
            template.push(this.getTemplate(item));
        });
        $list.html(template.join(''));
    }
    static filterList(query = "") {
        let result = [];
        this.pharmacies.map((item) => {
            if (item[query] || query == "all") result.push(item);
        });
        return result;
    }
    static updateData(options){
        this.map.removePoints();
        let filter = this.filterList(options.key);
        this.generatePlacemarks(filter);
        this.generateList(filter);
    }
    static selectBinding() {
        this.uiSelect = new UISelect({
            element: $(".geo-network__filter__ui-select")
        }).init();
        let generatedOptions = this.uiSelect.generatedOptions;
        for (let key in generatedOptions) {
            let option = generatedOptions[key];
            option.addListener("select", () => {
                this.updateData({
                    key: option.key
                })
            });
            $(option.element).on("click", () => option.callListener("select"));
        }
    }
    static checkWorkingTime(options){
        let day = new Date().getDay();
        let currentHour = new Date().getHours();
        //let currentHour = 8;
        let currentDate = new Date();
        let currentDay = (day == 0 ? "sunday" : '') + (day > 0 && day < 6 ? "weekday" : '') + (day == 6 ? "saturday" : '');
        let dayData = options.working[currentDay];
        let openModel = {
            status: true,
            anyTime: dayData.anyTime,
            remain: dayData.to.hour - currentHour
        };
        let closeModel = {
            status: false,
            anyTime: dayData.anyTime,
            remain: dayData.from.hour - currentHour > 0 ? dayData.from.hour - currentHour : 24 - currentHour + dayData.from.hour
        };
        if(options.working.weekday.from.hour == null) return closeModel;     
        if(dayData.from.hour != null){
            if((dayData.to.hour - currentHour >= 0 && dayData.from.hour <= currentHour) || dayData.anyTime){
                return openModel;
            } else {
                return closeModel;
            }
        } else return closeModel;
    }
    static getTemplate(options) {
        let { weekday, saturday, sunday} = options.working;
        let workingTime = this.checkWorkingTime(options);
        return `
        <div class="geo-network__list__item">

            <div class="row geo-network__list__item__row">
                <div class="col-md-8 col-sm-12">
                    <div class="geo-network__list__item__title highlight-links">
                        <a href="/pharmacy/${options.alias}">
                            ${options.adress}
                        </a>
                    </div>
                    <div class="geo-network__list__item__labels">
                        <div class="geo-network__list__item__labels__el${options.isPoint ? ' active' : ''}">Пункт выдачи заказов</div>
                        <div class="geo-network__list__item__labels__el${options.isOptics ? ' active' : ''}">Оптика</div>
                        <div class="geo-network__list__item__labels__el${options.isManufacture ? ' active' : ''}">Собственное производство</div>
                        <div class="geo-network__list__item__labels__el${options.isHospital ? ' active' : ''}">Получить в стационаре</div>
                        <div class="geo-network__list__item__labels__el${options.isPrivileges ? ' active' : ''}">Льготное</div>
                    </div>
                </div>
                <div class="col-md-4 col-sm-12">
                    <div class="geo-network__list__item__meta geo-network__list__item__adress align-center">
                        <img src="/dist/icons/geo-point.svg" class="geo-network__list__item__icon">
                        <div>
                            
                            ${options.title}
                        </div>
                    </div>
                    <div class="geo-network__list__item__meta geo-network__list__item__time align-center">
                        <img src="/dist/icons/clock.svg" class="geo-network__list__item__icon">
                        <div class="${workingTime.anyTime ? 'hidden' : ''}">
                            ${workingTime.status ? 
                                `<span class='highlight-text_green'>открыто</span> - до закрытия ${
                                    workingTime.remain > 0 ? workingTime.remain + ' ч.' : 'менее часа'
                                }` :
                                `<span class="highlight-text_red">закрыто</span>` 
                            }
                            
                        </div>
                        <div>
                        ${
                            workingTime.anyTime ? `<span class='highlight-text_green'>круглосуточно</span>` : ''
                        }
                        </div>
                    </div>
                </div>
            </div>

        </div>
        `
    }
}
export {
    GeoNetwork
};
class Speller {
    static apiUrl = "https://speller.yandex.net/services/spellservice.json/checkText";
    static checkText(value, callback) {
        $.post(this.apiUrl, {text: value}).then((resp) => {
            if (resp.length) callback({status: DefineConst.STATUS_SUCCESS, source: resp[0].word, result: resp[0].s[0], all: resp[0]});
            else callback({status: DefineConst.STATUS_ERROR,source: value, result: value, all: []});
        });
    }
}

export { Speller }; 
import { Config } from './config.js';
import { Service } from './Service.class.js';
class PharmacyInfo {
    static _pharmacies = [];
    static _loadedListener = new Function();
    static _isLoaded = false;
    static isCached = false;
    static cacheTimeout = 3600;
    static get pharmacies() {
        return this._pharmacies;
    }
    static set pharmacies(value) {
        this._pharmacies = value;
    }
    static get isLoaded() {
        return this._isLoaded;
    }
    static set isLoaded(value) {
        this._isLoaded = value;
        this._loadedListener(this.pharmacies);
    }
    static init() {
        let cacheName = 'cache-pharmacies';
        let cache = localStorage.getItem(cacheName);
        if (cache == null) {
            this.getJson((resp) => {
                this.pharmacies = resp;
                let cacheTemplate = {
                    timestamp: Service.getUnixTime(),
                    data: resp
                }
                localStorage.setItem(cacheName, JSON.stringify(cacheTemplate));
                this.isLoaded = true;
            });

        } else {
            let cacheData = JSON.parse(cache);
            let timeout = (cacheData.timestamp + this.cacheTimeout) - Service.getUnixTime();
            if (timeout < 0) {
                localStorage.removeItem(cacheName);
            }
            this.pharmacies = cacheData.data;
            this.isLoaded = true;
            this.isCached = true;
        }
    }
    static ready(callback) {
        if (this.isLoaded) callback();
        else this._loadedListener = callback;
    }
    static getInfo() {
        return this.pharmacies;
    }
    static getPharmacy(value, property) {
        return this.pharmacies.find((item) => item[property] == value);
    }
    static getJson(callback) {
        $.post(Config.dataRequest.pharmacies).then((resp) => callback(resp))
            .catch((e) => console.warn(e));
    }
}
PharmacyInfo.init();
export { PharmacyInfo };
import { Config } from './config.js';
class AnalyticsController {
    static counter = null;
    static init() {
        this.counter = new AnalyticsCounter({
            counterId: Config.analytics.metrikaCounterId,
        });
        this.counter.init();
        
    }
    static getModel(value) {
        return this._conditionModels[value];
    }
    static _conditionModels = {
        external(params, applyTarget) {
            return () => null;
        },
        pageUrl(params, applyTarget) {
            return () => {
                if(params.strict){
                    if (location.href == params.url) applyTarget()
                } else {
                    if(location.href.indexOf(params.url) > -1) applyTarget()
                }
                
            };
        },
        onClick(params, applyTarget) {
            return () => $(params.element).on("click", () => applyTarget());
        },
        onSubmit(params, applyTarget) {
            return () => $(params.element).on("submit", () => applyTarget());
        }
    };
}

class AnalyticsCounter {
    targets = {};
    queue = [];
    observers = [];
    constructor(params) {
        
        this.counterId = params.counterId;
    }
    init() {
        if(window.targets != undefined) this.addTargets(window.targets);
        return this;
    }
    addTarget(targetId, target) { 
        let targetItem = new AnalyticsTarget(targetId, target);
        this.targets[targetId] = targetItem.init();
        return targetItem;
    }
    addTargets(targets) {
        for(let key in targets){
            this.addTarget(key, targets[key]);
        }
    }
    callTarget(targetId) { 
        this.targets[targetId].applyTarget();
    }
}


class AnalyticsTarget {
    condition = null;
    props = {};
    constructor(targetId, params) {
        this.targetId = targetId;
        this.model = params.model || "external";
        this.arguments = params.arguments || {};
        this.caller = params.caller || null;
        this.desc = params.desc || null;
    }
    applyTarget() {
        Debug.log(this, "Apply Analytics Target", this);
        window[`yaCounter${AnalyticsController.counter.counterId}`].reachGoal(this.targetId);
        
    }
    init() {
        let model = AnalyticsController.getModel(this.model);
        this.condition = model(this.arguments, this.applyTarget.bind(this));
        this.condition();
        return this;
    }
}


$(document).on("yacounter" + Config.analytics.metrikaCounterId + "inited", () => AnalyticsController.init());


export { AnalyticsController, AnalyticsCounter, AnalyticsTarget };
/*
AnalyticsController.counter.addTargets([{
        targetId: "test",
        model: "pageUrl",
        desc: "test",
        arguments: {
            url: "http://apteka.fvds.ru/catalog"
        }
    },
    {
        targetId: "test3",
        model: "onSubmit",
        desc: "test",
        arguments: {
            element: ".js-auth-register-form"
        }
    },
    {
        targetId: "test2",
        desc: "test2"
    }
]);
*/
class AuthController {
    static frames = {};
    static userData = {
        name: null,
        phone: null,
        email: null
    };
    static init() {
        let ctx = this;
        $(".popup__auth__frame").each((i, item) => {
            let dataId = $(item).attr("id");
            this.frames[dataId] = new AuthFrameItem({
                id: i,
                name: dataId,
                element: $(item)
            });
        });
        $(".js-auth-register-form").on("submit", (event) => this.serializeForm(event, this.getAuthCode.bind(this)));
        $(".js-auth-login-form").on("submit", (event) => this.serializeForm(event, this.login.bind(this)));
    }
    static serializeForm(event, callback) {
        event.preventDefault();
        let form = {};
        for (let item of $(event.target).serializeArray()) {
            form[item.name] = item.value;
        }
        callback(form); 
        Debug.log([form], "Auth Serialized Form", this); 
        return this;
    }
    static login(userData) {
        $.extend(AuthController.userData, {
            username: userData.username
        });
        let request = {
            username: userData.username,
            password: userData.password,
            action: "auth/formLogin",
            csrf: OfficeConfig.csrf,
            return: ""
        }
        Debug.log([request], "Auth Login Request", this);
        $.post("/assets/components/office/action.php", request)
            .then((resp) => {
                let response = JSON.parse(resp);
                Debug.log([request], "Auth Login Response", this);
                if (response.success) {
                    location.href = "/profile";
                } else {
                    Toast.createToast({
                        type: DefineConst.STATUS_ERROR,
                        content: response.message
                    });
                }


            })
            .catch((e) => Debug.error(["Failed Login Request", request], this));
    }
    static logout() {
        $.post("/?action=auth/logout").then((resp) => {
            Toast.createToast({
                content: "Logout",
                type: DefineConst.STATUS_SUCCESS
            })
        });
    }
    static getAuthCode(userData) {
        $.extend(AuthController.userData, {
            name: userData.name,
            phone: userData.phone
        });
        let data = {
            action: "getAuthCode"
        };
        $.extend(data, userData);
        $.post(Config.dataRequest.auth, data)
            .then((resp) => {
                $(".js-auth-verify-phone").text(data.phone);
                AuthView.changeFrame(DefineConst.AUTH_FRAME_VERIFY);
                AuthView.initResendTimer();
            })
            .catch((e) => {
                Debug.error(e);
            });
        return this;
    }
    static checkAuthCode(userData) {
        $.post(Config.dataRequest.auth, userData)
            .then((resp) => {
                Toast.createToast({
                    type: DefineConst.STATUS_ERROR,
                    content: Config.strings.waitPaveroApi
                })
            })
            .catch((e) => Debug.error(e));
    }
}

class AuthView {
    static resend = {
        timer: null,
        defaultValue: 60,
        value: 0
    };
    static init() {

    }
    static changeFrame(name) {
        for (let key in AuthController.frames) {
            let frame = AuthController.frames[key];
            if (frame.name == name) {
                Debug.log([frame], "Change Frame", this);
                $(frame.element).show()
            } else {
                $(frame.element).hide();
            }
        }
    }
    static destroyResendTimer() {
        this.resend.value = this.resend.defaultValue;
        clearInterval(this.resend.timer);
    }
    static initResendTimer() {
        this.resend.value = this.resend.defaultValue;
        this.resend.timer = setInterval(() => {
            this.resend.value = this.resend.value - 1;
            if (this.resend.value <= 0) {
                clearInterval(this.resend.timer);
                this.resend.value = this.resend.defaultValue;
                $(".js-auth-resend-timer").html(`
                    <a href="javascript:;" onclick="AuthController.getAuthCode(AuthController.userData)">Отправить еще раз</a>
                `);
            } else {
                $(".js-auth-resend-timer").html(`
                    <span>Отправить еще раз </span><span class="highlight-text_grey">через ${this.resend.value} секунд.</span>
                `);
            }
        }, 1000);
    }
    static showPopup(frame = DefineConst.AUTH_FRAME_LOGIN) {
        let ctx = this;
        $.fancybox.open({
            type: "inline",
            src: "#popup_auth",
            beforeClose: () => ctx.destroyResendTimer()
        });
        this.changeFrame(frame);
    }
}
class AuthFrameItem {
    constructor(params) {
        this.id = params.id;
        this.name = params.name;
        this.element = params.element;
    }
}
AuthController.init();
export { AuthController, AuthView, AuthFrameItem };
class CustomScrollController {
    static init() {
        let windowWidth = $(window).width();
        let bindHandler = (i, item) => {
            let $item = $(item);
            if ($item.height() >= 0) $item.customScroll();
        }
        let cardListScale = function (i, item) {
            let childCount = $(this).children().length;
            $(this).css({
                width: childCount * 270 + "px"
            });
        }
        $(".js-custom-scroll").each(bindHandler);

        if (WindowState.isMobile) $(".card-list").each(cardListScale);
    }
}
export { CustomScrollController };
class FancyboxController {
    static init() {
        $.fancybox.defaults.beforeLoad = function () {
            $("html,body").css({
                overflow: "hidden"
            });
            $(".search-form_is-pinned").css({
                paddingRight: "17px"
            });
        };
        $.fancybox.defaults.afterClose = function () {
            $("html,body").css({
                overflow: "auto"
            });
            $(".search-form_is-pinned").css({
                paddingRight: "0"
            });
        };
        $.fancybox.defaults.touch = false;
        $(".js-fancybox-close").on("click", function () {
            $.fancybox.close();
        });
        $.fancybox.defaults.animationEffect = "zoom-in-out";
        $.fancybox.defaults.animationDuration = 250;
    }
} 
FancyboxController.init();
export { FancyboxController };
class WavesEffectController{
    static init(){
      Waves.attach('.product__amount-inc,.product__amount-dec,.button:not(.button_disabled)');
      Waves.init();
    }
    static attach(selector){
        Waves.attach(selector);
        Waves.init();
    }
}   
WavesEffectController.init(); 
/*
class Feedback {
  static showPopup(params) {
    $.fancybox.open({
      src: "#popup_feedback_" + params.action,
      type: "inline"
    });
  }
  static sendFeedback(event) {
    event.preventDefault();
    let query = "msg_action=" + $(event.target).attr("data-action") + "&" + $(event.target).serialize();
    $.post(Config.endpoints.feedback, query).then(function (resp) {
      resp = JSON.parse(resp);
      if (resp.status == "success") $.fancybox.close();
      setTimeout(function () {
        console.log(resp);
        Toast.createToast({ content: resp.message, type: resp.status });
      }, 300);
    });
  }
  static sendRate(event) {
    let query = "msg_action=score&value=" + $(self).attr("data-feedback-rate") + "&id=" + $(self).attr("data-feedback-rate");
    $.post(Config.endpoints.feedback, query).then(function (resp) {
      console.log(resp);
    });
  }
  static sendSubscribe(event) {
    let query = "msg_action=subscribe&" + $(self).serialize();
    $.post(Config.endpoints.feedback, query).then(function (resp) {
      $(event).html(`
        <span class="highlight-text_green">${Config.strings.feedbackSubscribe}</span>
      `);
    });
  }
  static init() {
    $(".js-popup-feedback-action").each((i, item) => {
      $(item).on("submit", (event) => Feedback.sendFeedback(event));
    });
    $(".js-feedback-rate").on("click", function () {
      Feedback.sendRate($(this));
    });
    $(".js-popup-feedback-show").on("click",function () {
      Feedback.showPopup({action: $(this).attr("data-action")});
    });
  }
}

//Feedback.init();

*/
var Init = (function () {
  function init(){
    _export.customScroll();
  }
  var _export = {
    customScroll: function (el) {
      el = Service.defaultValue(el,".js-custom-scroll");
      $(el).each(function (i, item) {
        if($(item).height() >= 300) $(item).customScroll();
      });
    }
  };
  $(document).ready(function () {
    init();
  });
  return _export;
})();
